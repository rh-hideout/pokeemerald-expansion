import re
import os


def PrintGeneratedWarningText():
    print("//")
    print("// DO NOT MODIFY THIS FILE! It is auto-generated by tools/pokeball/pokeball_to_header.py")
    print("//")
    print("\n")


def PrintLineBreak():
    print("")


def ExtractBallIds():
    BALL_ENUM_PAT = re.compile(r"enum\s+PokeBall\s*\{(?P<ball_vals>[\s\S]*?)\}\s*;")
    BALL_NAME_PAT = re.compile(r"\bBALL_[A-Z0-9_]+")
    
    with open("./include/pokeball.h", "r") as pokeball_include_file:
        include_pokeball = pokeball_include_file.read()
    
    include_enum = BALL_ENUM_PAT.search(include_pokeball)
    if not include_enum:
        raise ValueError("Could not find `enum PokeBall` in include/pokeball.h")
    
    enum_body = include_enum.group("ball_vals")
    ball_ids = [
        name for name in BALL_NAME_PAT.findall(enum_body)
        if not name.endswith("_COUNT")
    ]
    
    return ball_ids


tabStr = "    "
ball_ids = ExtractBallIds()

def PrintBallGfxTags():
    tag_start = 0
    for id in ball_ids:
        ball_type = id.replace("BALL_", "")
        gfx_tag = f"GFX_TAG_{ball_type}_BALL"
        print(f"#define {gfx_tag} (BALL_GFX_TAG_START + 0x{tag_start:02X})")
        tag_start += 1


def PrintBallCompressedSpriteSheets():
    print("const struct CompressedSpriteSheet gBallSpriteSheets[POKEBALL_COUNT] =")
    print("{")
    for id in ball_ids:
        ball_type = id.replace("BALL_", "")
        ball_gfx = "gBallGfx_" + f"{ball_type}".capitalize()
        gfx_tag = f"GFX_TAG_{ball_type}_BALL"
        print(f"{tabStr}[{id}] = {{{ball_gfx}, BALL_SPRITE_SHEET_SIZE, {gfx_tag}}},")
    print("};")


def PrintBallSpritePalettes():
    print("const struct SpritePalette gBallSpritePalettes[POKEBALL_COUNT] =")
    print("{")
    for id in ball_ids:
        ball_type = id.replace("BALL_", "")
        ball_pal = "gBallPal_" + f"{ball_type}".capitalize()
        gfx_tag = f"GFX_TAG_{ball_type}_BALL"
        print(f"{tabStr}[{id}] = {{{ball_pal}, {gfx_tag}}},")
    print("};")


def PrintBallSpriteTemplates():
    print("const struct SpriteTemplate gBallSpriteTemplates[POKEBALL_COUNT] =")
    print("{")
    for id in ball_ids:
        ball_type = id.replace("BALL_", "")
        gfx_tag = f"GFX_TAG_{ball_type}_BALL"
        print(f"{tabStr}[{id}] =")
        print(f"{tabStr}{{")
        print(f"{tabStr}{tabStr}.tileTag = {gfx_tag},")
        print(f"{tabStr}{tabStr}.paletteTag = {gfx_tag},")
        print(f"{tabStr}{tabStr}.oam = &sBallOamData,")
        print(f"{tabStr}{tabStr}.anims = sBallAnimSequences,")
        print(f"{tabStr}{tabStr}.images = NULL,")
        print(f"{tabStr}{tabStr}.affineAnims = sAffineAnim_BallRotate,")
        print(f"{tabStr}{tabStr}.callback = SpriteCB_BallThrow,")
        print(f"{tabStr}}},")
    print("};")


def PrintBallItemIds():
    print("const u16 gBallItemIds[POKEBALL_COUNT] =")
    print("{")
    for id in ball_ids:
        ball_type = id.replace("BALL_", "")
        item = f"ITEM_{ball_type}_BALL"
        print(f"{tabStr}[{id}] = {item},")
    print("};")



if __name__ == "__main__":
    if not os.path.exists("Makefile"):
        print("Please run this script from the project's root folder.")
        quit()

    ball_names = ExtractBallIds()
    
    PrintGeneratedWarningText()
    PrintBallGfxTags()
    PrintLineBreak()
    PrintBallCompressedSpriteSheets()
    PrintLineBreak()
    PrintBallSpritePalettes()
    PrintLineBreak()
    PrintBallSpriteTemplates()
    PrintLineBreak()
    PrintBallItemIds()
